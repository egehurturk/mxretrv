input: domain list
output: list of DNS MX records for each domain


! multithreaded --> seperate thread for each domain

Examples:
    mxretrv google.com -f domainlists.txt -o mxdocuments.csv
    mxretrv google.com yahoo.com ...

CL Format:
    mxretrv v0.1 - SNAPSHOT
    Usage:
        mxretrv -f|--file input_file -o|--output output_file [-b|--batch-size size] [-m|--multi] [-v|--verbose]

    Options:

        domain_names: list of domain names delimited with ' ' (read from stdin ('\n') if no domain_names is passed)

        -f --file: a text file containing domain names delimited with "\n"

        -o --output: CSV file to output MX records for each domain name (otherwise stdout is used)

        -b --batch-size: the number of domain names to process in each thread (if multithreading is not enabled, the value of this argument will be ignored)

        -m --multi: enable multithreading

        -v --verbose: output extra information about the process

        -h --help: print this message

Design Thoughts:
    We'll have a JAR file --> compiled source code
    make this executable:
        shell script?
            (/usr/local/bin may cause problems (may have to copy the entire project dir???))

    multithreading arch:
                    [INPUT: n domain lists delim w/ '\n']
                                       |
                                       |
                                       v
                [Thread #1]   [Thread #2]   [Thread #3] ... [Thread #(n/b)]
                    |              |                .               |
                    |              |                .               |
                    v              v                .               v
                O(b) operation    O(b) operation    ...     O(b) operation


        * optimum b size? (experiment with different results) --> must be the default


    Thread number = nThread + rThread
    Input size = nThread * batchSize + rThread * rSize

    [Worker #1] --> takes in a batch of input (Runnable) and outputs:
    {
        "Domain_Name_1": ["MX_1"], ["MX_2"], ..., ["MX_N"],
        "Domain_Name_2": ["MX_1"], ["MX_2"], ..., ["MX_N"],
        ...,
        "Domain_Name_N": ["MX_1"], ["MX_2"], ..., ["MX_N"]
    }


    [Worker #2] --> takes in a batch of input (Runnable)
    ...
    .
    .
    [Worker #n] --> takes in a batch of input (Runnable)

    =======================================================================================
    next_batch_start = 0
    for i = 0 to thread_number:
        input_batch_sub = input[next_batch_start : next_batch_start + batch_number]
        create Worker W with input_batch_sub
        pool executes Worker W

    for i = 0 to remaining_threads:
        input_batch_sub = input[next_batch_start: next_batch_start + remaining_size]
        create Worker W with input_batch_sub
        pool executes Worker W
    =======================================================================================


    ω = number of threads (constant) (163)
    β = ⌊N / ω⌋           (batch size)
    α = N mod ω           (remaining size)
    δ = ⌈ α / β ⌉         (remaining thread)
    N > ω is guaranteed


    Prove that δ = 1

    δ =  ⌈ α / β ⌉ = ⌈ (N - βω) / ⌊N / ω⌋ ⌉
                   = ⌈ (N - ⌊N / ω⌋ω) / ⌊N / ω⌋ ⌉



    =======================================================================================


    Given the input file (a text (txt) file containing domain names delimited with
    '\n') and the input size, the program splits the work into "batches" (if
    multithreading is enabled and input size is larger than the limit). The program
    generates a fixed thread pool with size 200, as maximum thread number is
    163 + remaining threads (which is always 1), and spawns a thread responsible for
    doing its work for its batch.

    Every thread should get the MX document for batch_size domains. The goal is to store
    the MX documents in an output file. But if every thread simultaneously tries
    to access and write to output file, race condition occurs.

    One way to overcome this problem is to have a single thread that handles I/O job,
    that is, writing to output file, and have other threads simply put the text to be written
    to a queue that the I/O thread draws from.

    One other way is to lock (make it synchronous) the threads when they print their results
    to the output file.

    =============================================================================================================================

    input  file   ---->  give it to each thread  ---->  each thread should    ---->  thread post result string  ---+
    (n lines)              (file pointer)              read its own portion               to IOQueue               |
                                                        (specified w/ batch_size)                                  |
                                                                                                                   |
                                                                                                                   v
                                                            IOWorker save the result    <----     IOWorker read from IOQueue
                                                                to output file                     whenever its size changes

    =============================================================================================================================

    Results:
    1) Single thread can process 5k domains in ~17 seconds

    =============================================================================================================================


    

    Thread workings:

    1) Test what happens if multiple threads put something into the queue
    ```
        @Override
        public void run() {
            inputQueue.offer(thing);
        }

        IOQueue<String> ioQueue = new IOQueue<>();
        Listeners.register(new IOWorker(ioQueue));
        ExecutorService executorService = Executors.newFixedThreadPool(3);
        executorService.execute(new MXWorker(ioQueue, "thread-1"));
        executorService.execute(new MXWorker(ioQueue, "thread-2"));
        executorService.execute(new MXWorker(ioQueue, "thread-3"));
        executorService.shutdown();
        Listeners.incomingJob();
    ```

    Results:
    ```
    thread-1
    thread-2
    thread-3
    ```


    2) Test what happens if multiple threads puts 1+ things into the queue
    Doesn't work ==> sometimes NPE! However, a worker doesn't put more than 1 things into the queue.


    **3) Test what happens if multiple threads puts a single thing into the queue and call event after putting**
    This method might be the best method. It works.
    ```
            LinkedBlockingQueue<String> ioQueue = new LinkedBlockingQueue<>();
            Listeners.register(new IOWorker(ioQueue));
            ExecutorService executorService = Executors.newFixedThreadPool(3);
            executorService.execute(new MXWorker(ioQueue, "thread-1"));
            executorService.execute(new MXWorker(ioQueue, "thread-2"));
            executorService.execute(new MXWorker(ioQueue, "thread-3"));
            executorService.shutdown();

            @Override
            public void work() {
                System.out.println(inputQueue.poll());
            }

            @Override
            public void work() {
                inputQueue.offer(thing);
                Listeners.incomingJob();
            }
    ```


    4) Test what happens if multiple threads puts a single thing into the queue and call event after every thread terminates
    THIS DOES NOT WORK!



TODO: recode App