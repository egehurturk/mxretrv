input: domain list
output: list of DNS MX records for each domain


! multithreaded --> seperate thread for each domain

Examples:
    mxretrv google.com -f domainlists.txt -o mxdocuments.csv
    mxretrv google.com yahoo.com ...

CL Format:
    mxretrv v0.1 - SNAPSHOT
    Usage:
        mxretrv -f|--file input_file -o|--output output_file [-b|--batch-size size] [-m|--multi] [-v|--verbose]

    Options:

        domain_names: list of domain names delimited with ' ' (read from stdin ('\n') if no domain_names is passed)

        -f --file: a text file containing domain names delimited with "\n"

        -o --output: CSV file to output MX records for each domain name (otherwise stdout is used)

        -b --batch-size: the number of domain names to process in each thread (if multithreading is not enabled, the value of this argument will be ignored)

        -m --multi: enable multithreading

        -v --verbose: output extra information about the process

        -h --help: print this message

Design Thoughts:
    We'll have a JAR file --> compiled source code
    make this executable:
        shell script?
            (/usr/local/bin may cause problems (may have to copy the entire project dir???))

    multithreading arch:
                    [INPUT: n domain lists delim w/ '\n']
                                       |
                                       |
                                       v
                [Thread #1]   [Thread #2]   [Thread #3] ... [Thread #(n/b)]
                    |              |                .               |
                    |              |                .               |
                    v              v                .               v
                O(b) operation    O(b) operation    ...     O(b) operation


        * optimum b size? (experiment with different results) --> must be the default


    Thread number = nThread + rThread
    Input size = nThread * batchSize + rThread * rSize

    [Worker #1] --> takes in a batch of input (Runnable) and outputs:
    {
        "Domain_Name_1": ["MX_1"], ["MX_2"], ..., ["MX_N"],
        "Domain_Name_2": ["MX_1"], ["MX_2"], ..., ["MX_N"],
        ...,
        "Domain_Name_N": ["MX_1"], ["MX_2"], ..., ["MX_N"]
    }


    [Worker #2] --> takes in a batch of input (Runnable)
    ...
    .
    .
    [Worker #n] --> takes in a batch of input (Runnable)

    =======================================================================================
    next_batch_start = 0
    for i = 0 to thread_number:
        input_batch_sub = input[next_batch_start : next_batch_start + batch_number]
        create Worker W with input_batch_sub
        pool executes Worker W

    for i = 0 to remaining_threads:
        input_batch_sub = input[next_batch_start: next_batch_start + remaining_size]
        create Worker W with input_batch_sub
        pool executes Worker W
    =======================================================================================


    ω = number of threads (constant) (163)
    β = ⌊N / ω⌋           (batch size)
    α = N - βω            (remaining size)
    δ = ⌈ α / β ⌉         (remaining thread)

    Prove that δ = 1

    δ =  ⌈ α / β ⌉ = ⌈ (N - βω) / ⌊N / ω⌋ ⌉
                   = ⌈ (N - ⌊N / ω⌋ω) / ⌊N / ω⌋ ⌉

    (ω ∣ N)  ==> δ = 0
    (ω !| N) ==>       


